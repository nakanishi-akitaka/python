
# SVR with GridSearched hyper parameters


# SVR with GridSearched hyper parameters after MinMaxScaler
/home/nakanishi/python/lib/python3.6/site-packages/pymatgen/core/periodic_table.py:409: UserWarning: No electronegativity for Ar. Setting to infinity. This has no physical meaning, and is mainly done to avoid errors caused by the code expecting a float.
  % self.symbol)
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/_parallel_backends.py", line 350, in __call__
    return self.func(*args, **kwargs)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 131, in __call__
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 131, in <listcomp>
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/model_selection/_validation.py", line 458, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py", line 248, in fit
    Xt, fit_params = self._fit(X, y, **fit_params)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py", line 213, in _fit
    **fit_params_steps[name])
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py", line 362, in __call__
    return self.func(*args, **kwargs)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py", line 581, in _fit_transform_one
    res = transformer.fit_transform(X, y, **fit_params)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/base.py", line 520, in fit_transform
    return self.fit(X, y, **fit_params).transform(X)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py", line 308, in fit
    return self.partial_fit(X, y)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py", line 334, in partial_fit
    estimator=self, dtype=FLOAT_DTYPES)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py", line 453, in check_array
    _assert_all_finite(array)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py", line 44, in _assert_all_finite
    " or a value too large for %r." % X.dtype)
ValueError: Input contains NaN, infinity or a value too large for dtype('float64').

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/nakanishi/python/lib/python3.6/multiprocessing/pool.py", line 119, in worker
    result = (True, func(*args, **kwds))
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/_parallel_backends.py", line 359, in __call__
    raise TransportableException(text, e_type)
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
ValueError                                         Thu Apr 26 16:19:09 2018
PID: 23028                         Python 3.6.4: /home/nakanishi/bin/python
...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), [[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], [49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], {'score': make_scorer(r2_score)}, array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), 0, {'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), [[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], [49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], {'score': make_scorer(r2_score)}, array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), 0, {'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], y=[49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], scorer={'score': make_scorer(r2_score)}, train=array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), test=array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), verbose=0, parameters={'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'}, fit_params={}, return_train_score='warn', return_parameters=False, return_n_test_samples=True, return_times=True, error_score='raise')
    453 
    454     try:
    455         if y_train is None:
    456             estimator.fit(X_train, **fit_params)
    457         else:
--> 458             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...-1, shrinking=True, tol=0.001, verbose=False))])>
        X_train = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y_train = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params = {}
    459 
    460     except Exception as e:
    461         # Note fit time as time until error
    462         fit_time = time.time() - start_time

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    243         Returns
    244         -------
    245         self : Pipeline
    246             This estimator
    247         """
--> 248         Xt, fit_params = self._fit(X, y, **fit_params)
        Xt = undefined
        fit_params = {}
        self._fit = <bound method Pipeline._fit of Pipeline(memory=N...-1, shrinking=True, tol=0.001, verbose=False))])>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
    249         if self._final_estimator is not None:
    250             self._final_estimator.fit(Xt, y, **fit_params)
    251         return self
    252 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in _fit(self=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    208                 else:
    209                     cloned_transformer = clone(transformer)
    210                 # Fit or load from cache the current transfomer
    211                 Xt, fitted_transformer = fit_transform_one_cached(
    212                     cloned_transformer, None, Xt, y,
--> 213                     **fit_params_steps[name])
        fit_params_steps = {'scaler': {}, 'svr': {}}
        name = 'scaler'
    214                 # Replace the transformer of the step with the fitted
    215                 # transformer. This is necessary when loading the transformer
    216                 # from the cache.
    217                 self.steps[step_idx] = (name, fitted_transformer)

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py in __call__(self=NotMemorizedFunc(func=<function _fit_transform_one at 0x2ada008712f0>), *args=(MinMaxScaler(copy=True, feature_range=(0, 1)), None, [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]), **kwargs={})
    357     # Should be a light as possible (for speed)
    358     def __init__(self, func):
    359         self.func = func
    360 
    361     def __call__(self, *args, **kwargs):
--> 362         return self.func(*args, **kwargs)
        self.func = <function _fit_transform_one>
        args = (MinMaxScaler(copy=True, feature_range=(0, 1)), None, [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
        kwargs = {}
    363 
    364     def call_and_shelve(self, *args, **kwargs):
    365         return NotMemorizedResult(self.func(*args, **kwargs))
    366 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in _fit_transform_one(transformer=MinMaxScaler(copy=True, feature_range=(0, 1)), weight=None, X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    576 
    577 
    578 def _fit_transform_one(transformer, weight, X, y,
    579                        **fit_params):
    580     if hasattr(transformer, 'fit_transform'):
--> 581         res = transformer.fit_transform(X, y, **fit_params)
        res = undefined
        transformer.fit_transform = <bound method TransformerMixin.fit_transform of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params = {}
    582     else:
    583         res = transformer.fit(X, y, **fit_params).transform(X)
    584     # if we have a weight for this transformer, multiply output
    585     if weight is None:

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    515         if y is None:
    516             # fit method of arity 1 (unsupervised transformation)
    517             return self.fit(X, **fit_params).transform(X)
    518         else:
    519             # fit method of arity 2 (supervised transformation)
--> 520             return self.fit(X, y, **fit_params).transform(X)
        self.fit = <bound method MinMaxScaler.fit of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params.transform = undefined
    521 
    522 
    523 class DensityMixin(object):
    524     """Mixin class for all density estimators in scikit-learn."""

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py in fit(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
    303             used for later scaling along the features axis.
    304         """
    305 
    306         # Reset internal state before fitting
    307         self._reset()
--> 308         return self.partial_fit(X, y)
        self.partial_fit = <bound method MinMaxScaler.partial_fit of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
    309 
    310     def partial_fit(self, X, y=None):
    311         """Online computation of min and max on X for later scaling.
    312         All of X is processed as a single batch. This is intended for cases

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py in partial_fit(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
    329         if sparse.issparse(X):
    330             raise TypeError("MinMaxScaler does no support sparse input. "
    331                             "You may consider to use MaxAbsScaler instead.")
    332 
    333         X = check_array(X, copy=self.copy, warn_on_dtype=True,
--> 334                         estimator=self, dtype=FLOAT_DTYPES)
        self = MinMaxScaler(copy=True, feature_range=(0, 1))
    335 
    336         data_min = np.min(X, axis=0)
    337         data_max = np.max(X, axis=0)
    338 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py in check_array(array=array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]]), accept_sparse=False, dtype=<class 'numpy.float64'>, order=None, copy=True, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=True, estimator=MinMaxScaler(copy=True, feature_range=(0, 1)))
    448             array = array.astype(np.float64)
    449         if not allow_nd and array.ndim >= 3:
    450             raise ValueError("Found array with dim %d. %s expected <= 2."
    451                              % (array.ndim, estimator_name))
    452         if force_all_finite:
--> 453             _assert_all_finite(array)
        array = array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]])
    454 
    455     shape_repr = _shape_repr(array.shape)
    456     if ensure_min_samples > 0:
    457         n_samples = _num_samples(array)

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py in _assert_all_finite(X=array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]]))
     39     # everything is finite; fall back to O(n) space np.isfinite to prevent
     40     # false positives from overflow in sum method.
     41     if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())
     42             and not np.isfinite(X).all()):
     43         raise ValueError("Input contains NaN, infinity"
---> 44                          " or a value too large for %r." % X.dtype)
        X.dtype = dtype('float64')
     45 
     46 
     47 def assert_all_finite(X):
     48     """Throw a ValueError if X contains NaN or infinity.

ValueError: Input contains NaN, infinity or a value too large for dtype('float64').
___________________________________________________________________________
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 699, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
  File "/home/nakanishi/python/lib/python3.6/multiprocessing/pool.py", line 644, in get
    raise self._value
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
ValueError                                         Thu Apr 26 16:19:09 2018
PID: 23028                         Python 3.6.4: /home/nakanishi/bin/python
...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), [[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], [49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], {'score': make_scorer(r2_score)}, array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), 0, {'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), [[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], [49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], {'score': make_scorer(r2_score)}, array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), 0, {'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], y=[49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], scorer={'score': make_scorer(r2_score)}, train=array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), test=array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), verbose=0, parameters={'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'}, fit_params={}, return_train_score='warn', return_parameters=False, return_n_test_samples=True, return_times=True, error_score='raise')
    453 
    454     try:
    455         if y_train is None:
    456             estimator.fit(X_train, **fit_params)
    457         else:
--> 458             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...-1, shrinking=True, tol=0.001, verbose=False))])>
        X_train = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y_train = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params = {}
    459 
    460     except Exception as e:
    461         # Note fit time as time until error
    462         fit_time = time.time() - start_time

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    243         Returns
    244         -------
    245         self : Pipeline
    246             This estimator
    247         """
--> 248         Xt, fit_params = self._fit(X, y, **fit_params)
        Xt = undefined
        fit_params = {}
        self._fit = <bound method Pipeline._fit of Pipeline(memory=N...-1, shrinking=True, tol=0.001, verbose=False))])>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
    249         if self._final_estimator is not None:
    250             self._final_estimator.fit(Xt, y, **fit_params)
    251         return self
    252 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in _fit(self=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    208                 else:
    209                     cloned_transformer = clone(transformer)
    210                 # Fit or load from cache the current transfomer
    211                 Xt, fitted_transformer = fit_transform_one_cached(
    212                     cloned_transformer, None, Xt, y,
--> 213                     **fit_params_steps[name])
        fit_params_steps = {'scaler': {}, 'svr': {}}
        name = 'scaler'
    214                 # Replace the transformer of the step with the fitted
    215                 # transformer. This is necessary when loading the transformer
    216                 # from the cache.
    217                 self.steps[step_idx] = (name, fitted_transformer)

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py in __call__(self=NotMemorizedFunc(func=<function _fit_transform_one at 0x2ada008712f0>), *args=(MinMaxScaler(copy=True, feature_range=(0, 1)), None, [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]), **kwargs={})
    357     # Should be a light as possible (for speed)
    358     def __init__(self, func):
    359         self.func = func
    360 
    361     def __call__(self, *args, **kwargs):
--> 362         return self.func(*args, **kwargs)
        self.func = <function _fit_transform_one>
        args = (MinMaxScaler(copy=True, feature_range=(0, 1)), None, [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
        kwargs = {}
    363 
    364     def call_and_shelve(self, *args, **kwargs):
    365         return NotMemorizedResult(self.func(*args, **kwargs))
    366 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in _fit_transform_one(transformer=MinMaxScaler(copy=True, feature_range=(0, 1)), weight=None, X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    576 
    577 
    578 def _fit_transform_one(transformer, weight, X, y,
    579                        **fit_params):
    580     if hasattr(transformer, 'fit_transform'):
--> 581         res = transformer.fit_transform(X, y, **fit_params)
        res = undefined
        transformer.fit_transform = <bound method TransformerMixin.fit_transform of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params = {}
    582     else:
    583         res = transformer.fit(X, y, **fit_params).transform(X)
    584     # if we have a weight for this transformer, multiply output
    585     if weight is None:

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    515         if y is None:
    516             # fit method of arity 1 (unsupervised transformation)
    517             return self.fit(X, **fit_params).transform(X)
    518         else:
    519             # fit method of arity 2 (supervised transformation)
--> 520             return self.fit(X, y, **fit_params).transform(X)
        self.fit = <bound method MinMaxScaler.fit of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params.transform = undefined
    521 
    522 
    523 class DensityMixin(object):
    524     """Mixin class for all density estimators in scikit-learn."""

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py in fit(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
    303             used for later scaling along the features axis.
    304         """
    305 
    306         # Reset internal state before fitting
    307         self._reset()
--> 308         return self.partial_fit(X, y)
        self.partial_fit = <bound method MinMaxScaler.partial_fit of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
    309 
    310     def partial_fit(self, X, y=None):
    311         """Online computation of min and max on X for later scaling.
    312         All of X is processed as a single batch. This is intended for cases

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py in partial_fit(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
    329         if sparse.issparse(X):
    330             raise TypeError("MinMaxScaler does no support sparse input. "
    331                             "You may consider to use MaxAbsScaler instead.")
    332 
    333         X = check_array(X, copy=self.copy, warn_on_dtype=True,
--> 334                         estimator=self, dtype=FLOAT_DTYPES)
        self = MinMaxScaler(copy=True, feature_range=(0, 1))
    335 
    336         data_min = np.min(X, axis=0)
    337         data_max = np.max(X, axis=0)
    338 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py in check_array(array=array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]]), accept_sparse=False, dtype=<class 'numpy.float64'>, order=None, copy=True, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=True, estimator=MinMaxScaler(copy=True, feature_range=(0, 1)))
    448             array = array.astype(np.float64)
    449         if not allow_nd and array.ndim >= 3:
    450             raise ValueError("Found array with dim %d. %s expected <= 2."
    451                              % (array.ndim, estimator_name))
    452         if force_all_finite:
--> 453             _assert_all_finite(array)
        array = array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]])
    454 
    455     shape_repr = _shape_repr(array.shape)
    456     if ensure_min_samples > 0:
    457         n_samples = _num_samples(array)

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py in _assert_all_finite(X=array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]]))
     39     # everything is finite; fall back to O(n) space np.isfinite to prevent
     40     # false positives from overflow in sum method.
     41     if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())
     42             and not np.isfinite(X).all()):
     43         raise ValueError("Input contains NaN, infinity"
---> 44                          " or a value too large for %r." % X.dtype)
        X.dtype = dtype('float64')
     45 
     46 
     47 def assert_all_finite(X):
     48     """Throw a ValueError if X contains NaN or infinity.

ValueError: Input contains NaN, infinity or a value too large for dtype('float64').
___________________________________________________________________________

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "test2.py", line 220, in <module>
    grid_search.fit(X_train, y_train)
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/model_selection/_search.py", line 639, in fit
    cv.split(X, y, groups)))
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 789, in __call__
    self.retrieve()
  File "/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py", line 740, in retrieve
    raise exception
sklearn.externals.joblib.my_exceptions.JoblibValueError: JoblibValueError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/nakanishi/python_work/2018/0426/test2.py in <module>()
    215 {'svr__kernel':['linear'], 'svr__C': range_c},  
    216 {'svr__kernel':['rbf'],    'svr__C': range_c, 'svr__gamma': range_g},
    217 {'svr__kernel':['sigmoid'],'svr__C': range_c, 'svr__gamma': range_g}]
    218 param_grid = [{'svr__kernel':['rbf'], 'svr__C': range_c, 'svr__gamma': range_g}]
    219 grid_search = GridSearchCV(pipe, param_grid, n_jobs=-1, scoring=score,cv=cv)
--> 220 grid_search.fit(X_train, y_train)
    221 print_search_score(grid_search)
    222 print("learning   score: ",end="")
    223 print_score(grid_search, X_train, y_train)
    224 y_pred = grid_search.predict(X_train)

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/model_selection/_search.py in fit(self=GridSearchCV(cv=ShuffleSplit(n_splits=10, random...ain_score='warn',
       scoring='r2', verbose=0), X=[[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], y=[49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], groups=None, **fit_params={})
    634                                   return_train_score=self.return_train_score,
    635                                   return_n_test_samples=True,
    636                                   return_times=True, return_parameters=False,
    637                                   error_score=self.error_score)
    638           for parameters, (train, test) in product(candidate_params,
--> 639                                                    cv.split(X, y, groups)))
        cv.split = <bound method BaseShuffleSplit.split of ShuffleS... random_state=0, test_size=0.1, train_size=None)>
        X = [[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...]
        y = [49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...]
        groups = None
    640 
    641         # if one choose to see train score, "out" will contain train score info
    642         if self.return_train_score:
    643             (train_score_dicts, test_score_dicts, test_sample_counts, fit_time,

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=-1), iterable=<generator object BaseSearchCV.fit.<locals>.<genexpr>>)
    784             if pre_dispatch == "all" or n_jobs == 1:
    785                 # The iterable was consumed all at once by the above for loop.
    786                 # No need to wait for async callbacks to trigger to
    787                 # consumption.
    788                 self._iterating = False
--> 789             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=-1)>
    790             # Make sure that we get a last message telling us we are done
    791             elapsed_time = time.time() - self._start_time
    792             self._print('Done %3i out of %3i | elapsed: %s finished',
    793                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
ValueError                                         Thu Apr 26 16:19:09 2018
PID: 23028                         Python 3.6.4: /home/nakanishi/bin/python
...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), [[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], [49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], {'score': make_scorer(r2_score)}, array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), 0, {'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), [[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], [49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], {'score': make_scorer(r2_score)}, array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), 0, {'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': False, 'return_times': True, 'return_train_score': 'warn'}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 2.0, 5.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 3.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [16.0, 1.0, 3.0, 4.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], ...], y=[49.5486, 58.3099, 63.2085, 66.4768, 69.2659, 71.8175, 155.0, 166.0, 191.0, 204.0, 184.0, 179.0, 33.0104, 40.0, 56.1245, 60.2076, 82.1453, 78.1315, 68.2353, 0.75, ...], scorer={'score': make_scorer(r2_score)}, train=array([ 21,  55, 157,  12, 108,  68, 144, 170, 2..., 211,   9, 195, 251, 192, 117,
        47, 172]), test=array([181, 258,  15,  65, 216,  63, 240, 228, 1..., 200,
       272,   7,   6, 230, 254,  22, 152]), verbose=0, parameters={'svr__C': 0.01, 'svr__gamma': 0.01, 'svr__kernel': 'rbf'}, fit_params={}, return_train_score='warn', return_parameters=False, return_n_test_samples=True, return_times=True, error_score='raise')
    453 
    454     try:
    455         if y_train is None:
    456             estimator.fit(X_train, **fit_params)
    457         else:
--> 458             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method Pipeline.fit of Pipeline(memory=No...-1, shrinking=True, tol=0.001, verbose=False))])>
        X_train = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y_train = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params = {}
    459 
    460     except Exception as e:
    461         # Note fit time as time until error
    462         fit_time = time.time() - start_time

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in fit(self=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    243         Returns
    244         -------
    245         self : Pipeline
    246             This estimator
    247         """
--> 248         Xt, fit_params = self._fit(X, y, **fit_params)
        Xt = undefined
        fit_params = {}
        self._fit = <bound method Pipeline._fit of Pipeline(memory=N...-1, shrinking=True, tol=0.001, verbose=False))])>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
    249         if self._final_estimator is not None:
    250             self._final_estimator.fit(Xt, y, **fit_params)
    251         return self
    252 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in _fit(self=Pipeline(memory=None,
     steps=[('scaler', Min...=-1, shrinking=True, tol=0.001, verbose=False))]), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    208                 else:
    209                     cloned_transformer = clone(transformer)
    210                 # Fit or load from cache the current transfomer
    211                 Xt, fitted_transformer = fit_transform_one_cached(
    212                     cloned_transformer, None, Xt, y,
--> 213                     **fit_params_steps[name])
        fit_params_steps = {'scaler': {}, 'svr': {}}
        name = 'scaler'
    214                 # Replace the transformer of the step with the fitted
    215                 # transformer. This is necessary when loading the transformer
    216                 # from the cache.
    217                 self.steps[step_idx] = (name, fitted_transformer)

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/externals/joblib/memory.py in __call__(self=NotMemorizedFunc(func=<function _fit_transform_one at 0x2ada008712f0>), *args=(MinMaxScaler(copy=True, feature_range=(0, 1)), None, [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]), **kwargs={})
    357     # Should be a light as possible (for speed)
    358     def __init__(self, func):
    359         self.func = func
    360 
    361     def __call__(self, *args, **kwargs):
--> 362         return self.func(*args, **kwargs)
        self.func = <function _fit_transform_one>
        args = (MinMaxScaler(copy=True, feature_range=(0, 1)), None, [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
        kwargs = {}
    363 
    364     def call_and_shelve(self, *args, **kwargs):
    365         return NotMemorizedResult(self.func(*args, **kwargs))
    366 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/pipeline.py in _fit_transform_one(transformer=MinMaxScaler(copy=True, feature_range=(0, 1)), weight=None, X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    576 
    577 
    578 def _fit_transform_one(transformer, weight, X, y,
    579                        **fit_params):
    580     if hasattr(transformer, 'fit_transform'):
--> 581         res = transformer.fit_transform(X, y, **fit_params)
        res = undefined
        transformer.fit_transform = <bound method TransformerMixin.fit_transform of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params = {}
    582     else:
    583         res = transformer.fit(X, y, **fit_params).transform(X)
    584     # if we have a weight for this transformer, multiply output
    585     if weight is None:

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...], **fit_params={})
    515         if y is None:
    516             # fit method of arity 1 (unsupervised transformation)
    517             return self.fit(X, **fit_params).transform(X)
    518         else:
    519             # fit method of arity 2 (supervised transformation)
--> 520             return self.fit(X, y, **fit_params).transform(X)
        self.fit = <bound method MinMaxScaler.fit of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
        fit_params.transform = undefined
    521 
    522 
    523 class DensityMixin(object):
    524     """Mixin class for all density estimators in scikit-learn."""

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py in fit(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
    303             used for later scaling along the features axis.
    304         """
    305 
    306         # Reset internal state before fitting
    307         self._reset()
--> 308         return self.partial_fit(X, y)
        self.partial_fit = <bound method MinMaxScaler.partial_fit of MinMaxScaler(copy=True, feature_range=(0, 1))>
        X = [[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...]
        y = [14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...]
    309 
    310     def partial_fit(self, X, y=None):
    311         """Online computation of min and max on X for later scaling.
    312         All of X is processed as a single batch. This is intended for cases

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/preprocessing/data.py in partial_fit(self=MinMaxScaler(copy=True, feature_range=(0, 1)), X=[[16.0, 1.0, 2.0, 1.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [84.0, 1.0, 1.0, 6.0, 16.0, 1.0, 6.0, 1.0, 2.0, 2.2, 6.0, 1.0, -2.0, -1.0, 210.0, 1.00794, 91.0, 103.0, 527.0, 14.01, ...], [16.0, 1.0, 1.0, 2.0, 16.0, 1.0, 3.0, 1.0, 2.58, 2.2, 6.0, 1.0, -2.0, -1.0, 32.065, 1.00794, 94.0, 103.0, 388.36, 14.01, ...], [72.0, 1.0, 1.0, 2.0, 4.0, 1.0, 6.0, 1.0, 1.3, 2.2, 4.0, 1.0, 2.0, -1.0, 178.49, 1.00794, 50.0, 103.0, 2506.0, 14.01, ...], [78.0, 1.0, 1.0, 1.0, 10.0, 1.0, 6.0, 1.0, 2.28, 2.2, 6.0, 1.0, -2.0, -1.0, 195.084, 1.00794, 68.0, 103.0, 2041.4, 14.01, ...], [5.0, 1.0, 1.0, 1.0, 13.0, 1.0, 2.0, 1.0, 2.04, 2.2, 3.0, 1.0, 1.0, -1.0, 10.811, 1.00794, 86.0, 103.0, 2349.0, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [56.0, 1.0, 1.0, 6.0, 2.0, 1.0, 6.0, 1.0, 0.89, 2.2, 2.0, 1.0, 2.0, -1.0, 137.327, 1.00794, 14.0, 103.0, 1000.0, 14.01, ...], [39.0, 1.0, 1.0, 3.0, 3.0, 1.0, 5.0, 1.0, 1.22, 2.2, 3.0, 1.0, 1.0, -1.0, 88.90585, 1.00794, 25.0, 103.0, 1799.0, 14.01, ...], [17.0, 1.0, 1.0, 1.0, 17.0, 1.0, 3.0, 1.0, 3.16, 2.2, 7.0, 1.0, -1.0, -1.0, 35.453, 1.00794, 99.0, 103.0, 171.6, 14.01, ...], [19.0, 1.0, 1.0, 6.0, 1.0, 1.0, 4.0, 1.0, 0.82, 2.2, 1.0, 1.0, -1.0, -1.0, 39.0983, 1.00794, 10.0, 103.0, 336.53, 14.01, ...], [18.0, 1.0, 1.0, 2.0, 18.0, 1.0, 3.0, 1.0, inf, 2.2, 0.0, 1.0, 0.0, -1.0, 39.948, 1.00794, 3.0, 103.0, 83.8, 14.01, ...], [52.0, 1.0, 1.0, 4.0, 16.0, 1.0, 5.0, 1.0, 2.1, 2.2, 6.0, 1.0, -2.0, -1.0, 127.6, 1.00794, 92.0, 103.0, 722.66, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [77.0, 1.0, 1.0, 1.0, 9.0, 1.0, 6.0, 1.0, 2.2, 2.2, 6.0, 1.0, -3.0, -1.0, 192.217, 1.00794, 66.0, 103.0, 2739.0, 14.01, ...], [3.0, 1.0, 1.0, 8.0, 1.0, 1.0, 2.0, 1.0, 0.98, 2.2, 1.0, 1.0, 1.0, -1.0, 6.941, 1.00794, 12.0, 103.0, 453.69, 14.01, ...], [51.0, 1.0, 1.0, 1.0, 15.0, 1.0, 5.0, 1.0, 2.05, 2.2, 5.0, 1.0, -3.0, -1.0, 121.76, 1.00794, 88.0, 103.0, 903.78, 14.01, ...], [83.0, 1.0, 1.0, 5.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], [83.0, 1.0, 1.0, 6.0, 15.0, 1.0, 6.0, 1.0, 2.02, 2.2, 5.0, 1.0, -3.0, -1.0, 208.9804, 1.00794, 87.0, 103.0, 544.4, 14.01, ...], ...], y=[14.9, 6.1151, 4.68, 33.0104, 6.207, 23.0, 18.7, 104.47, 38.0, 31.8705, 20.0, 58.66, 60.5324, 89.8, 101.74, 7.0, 34.57, 6.8, 88.44, 79.24, ...])
    329         if sparse.issparse(X):
    330             raise TypeError("MinMaxScaler does no support sparse input. "
    331                             "You may consider to use MaxAbsScaler instead.")
    332 
    333         X = check_array(X, copy=self.copy, warn_on_dtype=True,
--> 334                         estimator=self, dtype=FLOAT_DTYPES)
        self = MinMaxScaler(copy=True, feature_range=(0, 1))
    335 
    336         data_min = np.min(X, axis=0)
    337         data_max = np.max(X, axis=0)
    338 

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py in check_array(array=array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]]), accept_sparse=False, dtype=<class 'numpy.float64'>, order=None, copy=True, force_all_finite=True, ensure_2d=True, allow_nd=False, ensure_min_samples=1, ensure_min_features=1, warn_on_dtype=True, estimator=MinMaxScaler(copy=True, feature_range=(0, 1)))
    448             array = array.astype(np.float64)
    449         if not allow_nd and array.ndim >= 3:
    450             raise ValueError("Found array with dim %d. %s expected <= 2."
    451                              % (array.ndim, estimator_name))
    452         if force_all_finite:
--> 453             _assert_all_finite(array)
        array = array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]])
    454 
    455     shape_repr = _shape_repr(array.shape)
    456     if ensure_min_samples > 0:
    457         n_samples = _num_samples(array)

...........................................................................
/home/nakanishi/python/lib/python3.6/site-packages/sklearn/utils/validation.py in _assert_all_finite(X=array([[1.600e+01, 1.000e+00, 2.000e+00, ..., 1...., ..., 1.805e-01, 1.700e+02,
        1.910e+02]]))
     39     # everything is finite; fall back to O(n) space np.isfinite to prevent
     40     # false positives from overflow in sum method.
     41     if (X.dtype.char in np.typecodes['AllFloat'] and not np.isfinite(X.sum())
     42             and not np.isfinite(X).all()):
     43         raise ValueError("Input contains NaN, infinity"
---> 44                          " or a value too large for %r." % X.dtype)
        X.dtype = dtype('float64')
     45 
     46 
     47 def assert_all_finite(X):
     48     """Throw a ValueError if X contains NaN or infinity.

ValueError: Input contains NaN, infinity or a value too large for dtype('float64').
___________________________________________________________________________
